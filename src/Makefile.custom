# Contains several project-wide Makefile options

#####################################################################
# Optional software packages to be used, check configuration.h to
# enable them

# For using arbitrary length integers
# Should be set if USE_ARBITRARY_PRECISION_INDEX is set to 1
#GMP_LD=-lgmpxx -lgmp

#----------- POMDP SOLVE stuff ---------------
#if !DARWIN
##lp-solve-old
#LIBLPSOLVEOLD_NORMAL =    $(top_builddir)/src/libpomdp-solve/src/lp-solve-old/libLPSolveOld.a
#LIBLPSOLVEOLD_DEBUG =     $(top_builddir)/src/libpomdp-solve/src/lp-solve-old/libLPSolveOldDebug.a
#LIBLPSOLVEOLD_INCLUDES =  -I$(top_srcdir)/src/libpomdp-solve/src/lp-solve-old/
##mdp
#LIBMDP_NORMAL =    $(top_builddir)/src/libpomdp-solve/src/mdp/libmdp.a
#LIBMDP_INCLUDES =  -I$(top_srcdir)/src/libpomdp-solve/src/mdp/
##laspack
#LIBLASPACK_NORMAL =    $(top_builddir)/src/libpomdp-solve/src/laspack/liblaspack.a
#LIBLASPACK_INCLUDES =  -I$(top_srcdir)/src/libpomdp-solve/src/laspack/
##pomdp-solve itself
#LIBPOMDPSOLVE_NORMAL =  $(top_builddir)/src/libpomdp-solve/src/libPOMDPSolve.la
#LIBPOMDPSOLVE_PROFILE = $(top_builddir)/src/libpomdp-solve/src/libPOMDPSolveProfile.la
#LIBPOMDPSOLVE_DEBUG =   $(top_builddir)/src/libpomdp-solve/src/libPOMDPSolveDebug.a
#LIBPOMDPSOLVE_INCLUDES =-I$(top_srcdir)/src/libpomdp-solve/src
#endif

LPSOLVE_LD = -llpsolve55 -lcolamd -ldl
#----------- end POMDP SOLVE stuff ---------------

LIBDAI_NORMAL = $(top_builddir)/src/libDAI/libDAI.la
LIBDAI_INCLUDES =  -I$(top_srcdir)/src/libDAI

if FOUND_LIBXML2
  XML2_CFLAGS = `xml2-config --cflags`		#not sure why this was called 'CFLAGS'...?
  XML2_CXXFLAGS = `xml2-config --cflags`	#...but we also need it for g++, so making it CXXFLAGS...
endif
#####################################################################
# Compiler flags


# the debug flags used - according to 
# http://sourceware.org/gdb/current/onlinedocs/gdb_13.html#SEC111
# dwarf-2 is best for c++ and gdb
# -fno-inline should make things easier to debug
DEBUG_FLAGS = -O0 -gdwarf-2 -fno-inline

# Optimization flags used for building normal and profiling libraries.
# -DNDEBUG speeds up the boost::numeric::ublas operations
CPP_OPTIMIZATION_FLAGS = -O3 -DNDEBUG

#machine architectecture specific flags
#XXX: the following does not work on MacOS! (leave empty to resolve)
# Matthijs: is it not just a problem with using a GCC version that is
# too old to support this?
MARCH_FLAGS = -march=native  # automatically picks the correct settings for your system


#default flags throughout all MADP:
MADP_CXXFLAGS = -Wall -pipe $(MARCH_FLAGS) $(CSTANDARD) $(XML2_CXXFLAGS)
MADP_CPPFLAGS = 
MADP_CFLAGS =  

#####################################################################
# The final include path

MADP_INCLUDES = \
 $(INCLUDE) \
 $(LIBDAI_INCLUDES)\
 -I$(top_srcdir)/src/boost

MADP_LD = $(LPSOLVE_LD) 

#####################################################################
# Lists of libs to be linked with binaries.
# Note that the linking order matters, in order to correctly resolve symbols
#
#
# normal: 
MADPLIBS_NORMAL_BASE = \
 $(top_builddir)/src/base/libMADPBase.la

MADPLIBS_NORMAL_BASE_SUPPORT = \
 $(top_builddir)/src/support/libMADPSupport.la \
 $(MADPLIBS_NORMAL_BASE) 

MADPLIBS_NORMAL_BASE_PARSER = \
 $(top_builddir)/src/parser/libMADPParser.la \
 $(MADPLIBS_NORMAL_BASE) \
 $(LIBPOMDPSOLVE_NORMAL) $(LIBLPSOLVEOLD_NORMAL) $(LIBMDP_NORMAL) $(LIBLASPACK_NORMAL)

MADPLIBS_NORMAL_BASE_PARSER_SUPPORT = \
 $(top_builddir)/src/support/libMADPSupport.la \
 $(MADPLIBS_NORMAL_BASE_PARSER) 

MADPLIBS_NORMAL = $(top_builddir)/src/madp/libMADP.la
# $(top_builddir)/src/planning/libMADPPlanning.la \
# $(MADPLIBS_NORMAL_BASE_PARSER_SUPPORT) \
# $(LIBDAI_NORMAL)

MADPLIBS_NORMAL_NOPARSER_NOPLANNING = 	$(MADPLIBS_NORMAL_BASE)
MADPLIBS_NORMAL_NOPLANNING = 		$(MADPLIBS_NORMAL_BASE_PARSER_SUPPORT)
MADPLIBS_NORMAL_NOPARSER = 		$(MADPLIBS_NORMAL)
